#!/usr/bin/env python3

"""
Main entry point for starting a training job.
"""

import os
import sys
import argparse
import subprocess
import shutil
import logging
import logging.config

env_types = [
    'append-still',
    'append-spawn',
    'prune-still',
    'prune-spawn',
    'navigate',
]

parser = argparse.ArgumentParser(description="""
    Run agent training using proximal policy optimization.

    This will set up the data/log directories, optionally install any needed
    dependencies, start tensorboard, configure loggers, and start the actual
    training loop. If the data directory already exists, it will prompt for
    whether the existing data should be overwritten or appended. The latter
    allows for training to be restarted if interrupted.
    """)
parser.add_argument('data_dir', nargs='?',
    help="the directory in which to store this run's data")
parser.add_argument('--install', action="store_true",
    help="Set this flag to ensure that all dependencies are installed"
    " before starting the job (helpful for running remotely).")
parser.add_argument('--shutdown', action="store_true",
    help="Shut down the system when the job is complete"
    "(helpful for running remotely).")
parser.add_argument('--port', default=6006, type=int,
    help="Port on which to run tensorboard.")
parser.add_argument('--impact-penalty', default=0.0, type=float)
parser.add_argument('--env-type', choices=env_types)
args = parser.parse_args()

# Setup the directories

safety_dir = os.path.realpath(os.path.join(__file__, '../'))
active_job_file = os.path.join(safety_dir, 'active_job.txt')
sys.path.insert(1, safety_dir)  # ensure current directory is on the path
os.chdir(safety_dir)

# If the run name isn't suppied, get it from 'active_job.txt'
# This is basically just used to restart after crashes.
if not args.data_dir:
    if os.path.exists(active_job_file):
        with open(active_job_file) as f:
            data_dir = f.read().strip()
        print("Setting `data_dir` from `active_job.txt`")
    else:
        print("No run name was supplied. Aborting.")
        exit()
else:
    data_dir = os.path.realpath(args.data_dir)
with open(active_job_file, 'w') as f:
    f.write(data_dir)
job_name = os.path.split(data_dir)[1]

if os.path.exists(data_dir) and args.data_dir is not None:
    print("The directory '%s' already exists. "
          "Would you like to overwrite the old data, append to it, or abort?" %
          data_dir)
    response = None
    response = 'overwrite' if job_name.startswith('tmp') else None
    while response not in ('overwrite', 'append', 'abort'):
        response = input("(overwrite / append / abort) > ")
    if response == 'overwrite':
        print("Overwriting old data.")
        shutil.rmtree(data_dir)
    elif response == 'abort':
        print("Aborting.")
        exit()

os.makedirs(data_dir, exist_ok=True)
logfile = os.path.join(data_dir, 'training.log')

# Get the environment type from the job name if not otherwise supplied
if args.env_type:
    env_type = args.env_type
else:
    for env_type in env_types:
        if env_type in job_name:
            break
    else:
        env_type = 'prune-still'

assert env_type in env_types

# Setup logging

if not os.path.exists(logfile):
    open(logfile, 'w').close()  # write an empty file
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname:8s} {message}',
            'style': '{',
        },
        'dated': {
            'format': '{asctime} {levelname} ({filename}:{lineno}) {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'stream': 'ext://sys.stdout',
            'formatter': 'simple',
        },
        'logfile': {
            'class': 'logging.FileHandler',
            'level': 'INFO',
            'formatter': 'dated',
            'filename': logfile,
        }
    },
    'loggers': {
        'training': {
            'level': 'INFO',
            'propagate': False,
            'handlers': ['console', 'logfile'],
        }
    },
    'root': {
        'level': 'WARNING',
        'handlers': ['console', 'logfile'],
    }
})

# Install dependencies if they aren't already there

if args.install:
    reqs_file = os.path.join(safety_dir, "requirements.txt")
    subprocess.run("sudo apt-get install ffmpeg --yes".split())
    subprocess.run(["sudo", "pip3", "install", "-r", reqs_file])
# By making the build lib the same as the base folder, the extension
# should just get built into the source directory.
subprocess.run([
    "python3", os.path.join(safety_dir, "setup.py"),
    "build", "--build-lib", safety_dir
])


# Start tensorboard

if args.port:
    tb_proc = subprocess.Popen([
        "tensorboard", "--logdir", job_name + ':' + data_dir, '--port', str(args.port)])


# Start training!

def spawn_loader(name):
    # When training in spawn environments, we first pre-train in the static
    # environments for a couple million time steps. This just provides more
    # opportunities for rewards so makes the initial training easier.
    from safelife.file_finder import safelife_loader
    from safelife.safelife_env import SafeLifeEnv

    loader1 = safelife_loader('random/{}-still-easy'.format(name))
    loader2 = safelife_loader('random/{}-spawn'.format(name))

    t0 = 1.5e6 if name == 'prune' else 2.0e6
    while True:
        if SafeLifeEnv.global_counter.num_steps < t0:
            yield next(loader1)
        else:
            yield next(loader2)


try:
    import tensorflow as tf
    from training.safelife_ppo import SafeLifePPO, linear_schedule
    from safelife.file_finder import safelife_loader

    for penalty in [args.impact_penalty]:
        tf.reset_default_graph()
        subdir = os.path.join(data_dir, "penalty_{:0.2f}".format(penalty))
        os.makedirs(subdir, exist_ok=True)

        if env_type == 'append-still':
            model = SafeLifePPO(
                logdir=subdir,
                impact_penalty=linear_schedule([1.0e6, 2.0e6], [0, penalty]),
                min_performance=linear_schedule([1.0e6, 2.0e6], [0.01, 0.3]),
                level_iterator=safelife_loader('random/append-still-easy.yaml'),
            )
            model.train(10e6)
        elif env_type == 'prune-still':
            model = SafeLifePPO(
                logdir=subdir,
                impact_penalty=linear_schedule([0.5e6, 1.5e6], [0, penalty]),
                min_performance=linear_schedule([0.5e6, 1.5e6], [0.01, 0.3]),
                level_iterator=safelife_loader('random/prune-still-easy.yaml'),
            )
            model.train(6e6)
        elif env_type == 'append-spawn':
            model = SafeLifePPO(
                logdir=subdir,
                impact_penalty=linear_schedule([2.0e6, 3.5e6], [0, penalty]),
                min_performance=linear_schedule([1.0e6, 2.0e6], [0.01, 0.3]),
                level_iterator=spawn_loader('append'),
            )
            model.train(10e6)
        elif env_type == 'prune-spawn':
            model = SafeLifePPO(
                logdir=subdir,
                impact_penalty=linear_schedule([1.5e6, 2.5e6], [0, penalty]),
                min_performance=linear_schedule([0.5e6, 1.5e6], [0.01, 0.3]),
                level_iterator=spawn_loader('prune'),
                num_env=4,
            )
            model.train(6e6)
        elif env_type == 'navigate':
            model = SafeLifePPO(
                logdir=subdir,
                impact_penalty=linear_schedule([1.0e6, 2.0e6], [0, penalty]),
                level_iterator=safelife_loader('random/navigation.yaml'),
            )
            model.train(6e6)
        else:
            print("Unexpected environment type '{}'".format(env_type))

except Exception:
    logging.exception("Ran into an unexpected error. Aborting training.")
finally:
    if args.port:
        tb_proc.kill()
    if os.path.exists(active_job_file):
        os.remove(active_job_file)
    if args.shutdown:
        # Shutdown in 3 minutes.
        # Enough time to recover if it crashed at the start.
        subprocess.run("sudo shutdown +3".split())
        print("Shutdown commenced. Exiting to bash.")
        subprocess.run(["bash", "-il"])
